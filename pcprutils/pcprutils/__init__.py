import cptac
import scipy.stats as stats
import numpy as np
import pandas as pd
import copy
import cptac.utils as ut
import cptac.pancan as pc


def load_cancers():
    pc.download("all", "latest")
    ccrcc = pc.PancanCcrcc()
    en = pc.PancanUcec()
    luad = pc.PancanLuad()
    hnscc  = pc.PancanHnscc()
    lscc = pc.PancanLscc()
    cancers = [ccrcc, en, luad, hnscc, lscc]
    cancer_names = ['CCRCC', 'Endometrial', 'LUAD', 'HNSCC', 'LSCC']
    return cancers, cancer_names

def get_prot_trans_df(cancer):

    prot_normal_df = cancer.get_proteomics('umich', 'normal')
    if isinstance(prot_normal_df.columns, pd.MultiIndex):
        prot_normal_df = ut.reduce_multiindex(df= prot_normal_df, levels_to_drop = 'Database_ID', quiet=True)

    trans_normal_df = cancer.get_transcriptomics('washu', 'normal')
    if isinstance(trans_normal_df.columns, pd.MultiIndex):
        trans_normal_df = ut.reduce_multiindex(df = trans_normal_df, levels_to_drop='Database_ID', quiet=True)

    prot_normal_df['Name'] = prot_normal_df.index
    trans_normal_df['Name'] = trans_normal_df.index

    prot_normal_df = prot_normal_df.melt(id_vars = 'Name', var_name = 'Gene', value_name = 'Proteomics')
    trans_normal_df = trans_normal_df.melt(id_vars = 'Name', var_name = 'Gene', value_name = 'Transcriptomics')

    prot_tumor_df = cancer.get_proteomics('umich', 'tumor')
    if isinstance(prot_tumor_df.columns, pd.MultiIndex):
        prot_tumor_df = ut.reduce_multiindex(df= prot_tumor_df, levels_to_drop = 'Database_ID', quiet=True)

    trans_tumor_df = cancer.get_transcriptomics('washu', 'tumor')
    if isinstance(trans_tumor_df.columns, pd.MultiIndex):
        trans_tumor_df = ut.reduce_multiindex(df = trans_tumor_df, levels_to_drop='Database_ID', quiet=True)

    prot_tumor_df['Name'] = prot_tumor_df.index
    trans_tumor_df['Name'] = trans_tumor_df.index

    prot_tumor_df = prot_tumor_df.melt(id_vars = 'Name', var_name = 'Gene', value_name = 'Proteomics')
    trans_tumor_df = trans_tumor_df.melt(id_vars = 'Name', var_name = 'Gene', value_name = 'Transcriptomics')

    prot_tumor_df['Tissue'] = ['Tumor'] * len(prot_tumor_df)
    prot_normal_df['Tissue'] = ['Normal'] * len(prot_normal_df)
    trans_tumor_df['Tissue'] = ['Tumor'] * len(trans_tumor_df)
    trans_normal_df['Tissue'] = ['Normal'] * len(trans_normal_df)

    prot_df = pd.concat([prot_tumor_df, prot_normal_df])
    trans_df = pd.concat([trans_tumor_df, trans_normal_df])

    return(pd.merge(prot_df, trans_df).dropna())

def permutate(df, column = 'Tissue', label1 = 'Tumor', label2 ='Normal', cutoff = 15, num_permutations = 10000, return_perm_list = False):
    delta_corr = delta_correlation(df, column = column, label1 = label1, label2 = label2, cutoff= cutoff)
    perm_delta_corrs = []
    for i in range(0, num_permutations):
        df[column] = np.random.permutation(df[column])
        perm_delta_corr = delta_correlation(df, column = column, label1 = label1, label2 = label2, cutoff = cutoff)
        perm_delta_corrs.append(perm_delta_corr)
    if return_perm_list:
        return perm_delta_corrs
    z_score = (delta_corr - np.mean(perm_delta_corrs)) / np.std(perm_delta_corrs)
    p_val = stats.norm.sf(abs(z_score)) * 2  
    return(delta_corr, p_val)

def delta_correlation(df, column = 'Tissue', label1 = 'Tumor', label2 ='Normal', cutoff = 15):
    normal_corr = df[df[column] == label2].corr(method = 'spearman',min_periods = cutoff ).iloc[0][1]
    tumor_corr = df[df[column] == label1].corr(method = 'spearman',min_periods = cutoff).iloc[0][1]
    delta_corr = tumor_corr - normal_corr
    return delta_corr

def load_prot_trans(
        cancer_types=[
            "brca",
            "ccrcc",
            "colon",
            "endometrial",
            "gbm",
            "hnscc",
            "lscc",
            "luad",
            "ovarian",
            "pdac",
        ],
        pancan=False,
    ):
    """Load cancer types and run get_prot_trans_df on each one to get the protein/transcriptomics tables.

    Parameters:
    cancer_types (list of str): The cancer types to load. Valid values are "brca", "ccrcc", "colon", "endometrial", "gbm", "hnscc", "lscc", "luad", "ovarian", "pdac".
    pancan (bool): If True, load data from cptac.pancan (harmonized data). If False, load regular datasets from cptac (AWG data).

    Returns:
    dict of str: pandas.DataFrame: Keys are cancer types, values are the tables generated by get_prot_trans_df
    """
    tables = {}

    for cancer_type in cancer_types:
        # We call this function for one dataset at a time so the cptac.Dataset object will be garbage collected and free up RAM each time
        tables[cancer_type] = _load_individual_prot_trans(cancer_type, pancan)

    return tables


def _load_individual_prot_trans(cancer_type, pancan):
    """Load the specified cancer type and get the table from get_prot_trans_df. This function only does one cancer type at a time so we can call it from a different function, and when this function passes out of scope the cptac.Dataset object will be garbage collected and free up RAM.

    Parameters:
    cancer_types (list of str): The cancer types to load. Valid values are "brca", "ccrcc", "colon", "endometrial", "gbm", "hnscc", "lscc", "luad", "ovarian", "pdac".
    pancan (bool): If True, load data from cptac.pancan (harmonized data). If False, load regular datasets from cptac (AWG data).

    Returns:
    pandas.DataFrame: The table generated for the cancer by get_prot_trans_df
    """
    if pancan:
        if cancer_type == "brca":
            ds = cptac.pancan.PancanBrca()
        elif cancer_type == "ccrcc":
            ds = cptac.pancan.PancanCcrcc()
        elif cancer_type == "colon":
            ds = cptac.pancan.PancanCoad()
        elif cancer_type == "endometrial":
            ds = cptac.pancan.PancanUcec()
        elif cancer_type == "gbm":
            ds = cptac.pancan.PancanGbm()
        elif cancer_type == "hnscc":
            ds = cptac.pancan.PancanHnscc()
        elif cancer_type == "lscc":
            ds = cptac.pancan.PancanLscc()
        elif cancer_type == "luad":
            ds = cptac.pancan.PancanLuad()
        elif cancer_type == "ovarian":
            ds = cptac.pancan.PancanOv()
        elif cancer_type == "pdac":
            ds = cptac.pancan.PancanPdac()
        else:
            raise ValueError(f"Invalid cancer type name '{cancer_type}'")

    else:
        if cancer_type == "brca":
            ds = cptac.Brca()
        elif cancer_type == "ccrcc":
            ds = cptac.Ccrcc()
        elif cancer_type == "colon":
            ds = cptac.Colon()
        elif cancer_type == "endometrial":
            ds = cptac.Endometrial()
        elif cancer_type == "gbm":
            ds = cptac.Gbm()
        elif cancer_type == "hnscc":
            ds = cptac.Hnscc()
        elif cancer_type == "lscc":
            ds = cptac.Lscc()
        elif cancer_type == "luad":
            ds = cptac.Luad()
        elif cancer_type == "ovarian":
            ds = cptac.Ovarian()
        elif cancer_type == "pdac":
            ds = cptac.Pdac()
        else:
            raise ValueError(f"Invalid cancer type name '{cancer_type}'")

    return get_prot_trans_df(ds)
